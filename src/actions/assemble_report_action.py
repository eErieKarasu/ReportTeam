from src.actions.base_action import BaseAction
from src.schemas import Result
from typing import Dict, List, Any
import logging

logger = logging.getLogger(__name__)

class AssembleReportAction(BaseAction):
    """负责将各章节内容组装成最终报告的 Action"""
    
    @property
    def name(self) -> str:
        return "AssembleReport"
    
    @property
    def description(self) -> str:
        return "将所有已撰写好的章节文本按计划顺序组装成最终报告"
    
    async def run(self, written_sections: Dict[str, str], section_order: List[str], report_title: str, language: str) -> str:
        """
        组装最终报告
        
        Args:
            written_sections: 章节标题到章节内容的映射
            section_order: 章节顺序列表
            report_title: 报告标题
            language: 报告语言
            
        Returns:
            最终组装好的报告文本
        """
        logger.info(f"开始组装最终报告，共有 {len(written_sections)} 个章节")
        
        if not written_sections:
            logger.warning("没有章节内容可供组装")
            return f"# {report_title}\n\n*无内容*"
        
        # 根据语言选择一些文本
        if language.lower() == 'zh':
            toc_header = "## 目录"
            report_by = "报告生成于"
            empty_section = "*内容缺失*"
        else:
            toc_header = "## Table of Contents"
            report_by = "Report generated by"
            empty_section = "*No content available*"
        
        # 组装标题和介绍
        report_parts = [f"# {report_title}\n"]
        
        # 添加目录
        report_parts.append(f"{toc_header}")
        for i, section in enumerate(section_order):
            if section in written_sections:
                report_parts.append(f"{i+1}. [{section}](#{section.lower().replace(' ', '-')})")
        report_parts.append("\n---\n")
        
        # 添加各章节内容
        for section in section_order:
            section_anchor = section.lower().replace(' ', '-')
            report_parts.append(f"## {section}")
            if section in written_sections and written_sections[section]:
                report_parts.append(written_sections[section])
            else:
                report_parts.append(empty_section)
            report_parts.append("\n---\n")
        
        # 添加尾注
        import datetime
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_parts.append(f"\n\n*{report_by} ReportTeam AI - {now}*")
        
        # 合并所有部分
        final_report = "\n\n".join(report_parts)
        
        logger.info(f"报告组装完成，总共 {len(final_report)} 字符")
        return final_report